{"ast":null,"code":"import _classCallCheck from\"/Users/rabin/InterviewGuide-githubpages/InterviewGuideGitHubPages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/rabin/InterviewGuide-githubpages/InterviewGuideGitHubPages/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import axios from'axios';import{API_URL}from'../../Constants';export var USER_NAME_SESSION_ATTRIBUTE_NAME='authenticatedUser';var AuthenticationService=/*#__PURE__*/function(){function AuthenticationService(){_classCallCheck(this,AuthenticationService);}_createClass(AuthenticationService,[{key:\"executeBasicAuthenticationService\",value:function executeBasicAuthenticationService(username,password){return axios.get(\"\".concat(API_URL,\"/basicauth\"),{headers:{authorization:this.createBasicAuthToken(username,password)}});}},{key:\"executeJwtAuthenticationService\",value:function executeJwtAuthenticationService(username,password){return axios.post(\"\".concat(API_URL,\"/authenticate\"),{username,password});}},{key:\"createBasicAuthToken\",value:function createBasicAuthToken(username,password){return'Basic '+window.btoa(username+\":\"+password);}},{key:\"registerSuccessfulLogin\",value:function registerSuccessfulLogin(username,password){//let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n//console.log('registerSuccessfulLogin')\nsessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME,username);this.setupAxiosInterceptors(this.createBasicAuthToken(username,password));}},{key:\"registerSuccessfulLoginForJwt\",value:function registerSuccessfulLoginForJwt(username,token){sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME,username);this.setupAxiosInterceptors(this.createJWTToken(token));}},{key:\"createJWTToken\",value:function createJWTToken(token){return'Bearer '+token;}},{key:\"logout\",value:function logout(){sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);}},{key:\"isUserLoggedIn\",value:function isUserLoggedIn(){var user=sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);if(user===null)return false;return true;}},{key:\"getLoggedInUserName\",value:function getLoggedInUserName(){var user=sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);if(user===null)return'';return user;}},{key:\"setupAxiosInterceptors\",value:function setupAxiosInterceptors(token){var _this=this;axios.interceptors.request.use(function(config){if(_this.isUserLoggedIn()){config.headers.authorization=token;}return config;});}}]);return AuthenticationService;}();export default new AuthenticationService();","map":{"version":3,"sources":["/Users/rabin/InterviewGuide-githubpages/InterviewGuideGitHubPages/src/components/todo/AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","post","window","btoa","sessionStorage","setItem","setupAxiosInterceptors","token","createJWTToken","removeItem","user","getItem","interceptors","request","use","config","isUserLoggedIn"],"mappings":"8WAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,OAAT,KAAwB,iBAAxB,CAEA,MAAO,IAAMC,CAAAA,gCAAgC,CAAG,mBAAzC,C,GAEDC,CAAAA,qB,qOAEgCC,Q,CAAUC,Q,CAAU,CAClD,MAAOL,CAAAA,KAAK,CAACM,GAAN,WAAaL,OAAb,eACH,CAAEM,OAAO,CAAE,CAAEC,aAAa,CAAE,KAAKC,oBAAL,CAA0BL,QAA1B,CAAoCC,QAApC,CAAjB,CAAX,CADG,CAAP,CAEH,C,wFAE+BD,Q,CAAUC,Q,CAAU,CAChD,MAAOL,CAAAA,KAAK,CAACU,IAAN,WAAcT,OAAd,kBAAsC,CACzCG,QADyC,CAEzCC,QAFyC,CAAtC,CAAP,CAIH,C,kEAEoBD,Q,CAAUC,Q,CAAU,CACrC,MAAO,SAAWM,MAAM,CAACC,IAAP,CAAYR,QAAQ,CAAG,GAAX,CAAiBC,QAA7B,CAAlB,CACH,C,wEAEuBD,Q,CAAUC,Q,CAAU,CACxC;AACA;AACAQ,cAAc,CAACC,OAAf,CAAuBZ,gCAAvB,CAAyDE,QAAzD,EACA,KAAKW,sBAAL,CAA4B,KAAKN,oBAAL,CAA0BL,QAA1B,CAAoCC,QAApC,CAA5B,EACH,C,oFAE6BD,Q,CAAUY,K,CAAO,CAC3CH,cAAc,CAACC,OAAf,CAAuBZ,gCAAvB,CAAyDE,QAAzD,EACA,KAAKW,sBAAL,CAA4B,KAAKE,cAAL,CAAoBD,KAApB,CAA5B,EACH,C,sDAEcA,K,CAAO,CAClB,MAAO,UAAYA,KAAnB,CACH,C,uCAGQ,CACLH,cAAc,CAACK,UAAf,CAA0BhB,gCAA1B,EACH,C,uDAEgB,CACb,GAAIiB,CAAAA,IAAI,CAAGN,cAAc,CAACO,OAAf,CAAuBlB,gCAAvB,CAAX,CACA,GAAIiB,IAAI,GAAK,IAAb,CAAmB,MAAO,MAAP,CACnB,MAAO,KAAP,CACH,C,iEAEqB,CAClB,GAAIA,CAAAA,IAAI,CAAGN,cAAc,CAACO,OAAf,CAAuBlB,gCAAvB,CAAX,CACA,GAAIiB,IAAI,GAAK,IAAb,CAAmB,MAAO,EAAP,CACnB,MAAOA,CAAAA,IAAP,CACH,C,sEAEsBH,K,CAAO,gBAE1BhB,KAAK,CAACqB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACI,SAACC,MAAD,CAAY,CACR,GAAI,KAAI,CAACC,cAAL,EAAJ,CAA2B,CACvBD,MAAM,CAACjB,OAAP,CAAeC,aAAf,CAA+BQ,KAA/B,CACH,CACD,MAAOQ,CAAAA,MAAP,CACH,CANL,EAQH,C,qCAGL,cAAe,IAAIrB,CAAAA,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\nimport { API_URL } from '../../Constants'\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    executeBasicAuthenticationService(username, password) {\n        return axios.get(`${API_URL}/basicauth`,\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    }\n\n    executeJwtAuthenticationService(username, password) {\n        return axios.post(`${API_URL}/authenticate`, {\n            username,\n            password\n        })\n    }\n\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password)\n    }\n\n    registerSuccessfulLogin(username, password) {\n        //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n        //console.log('registerSuccessfulLogin')\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors(token) {\n\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}